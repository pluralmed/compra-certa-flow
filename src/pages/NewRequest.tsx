import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useData } from "@/context/data/DataContext";
import { Request, Client, Unit, Budget, Item, RequestType, Priority } from "@/context/data/types";
import { useAuth } from "@/context/AuthContext";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ShoppingCart } from "lucide-react";

// Import our new components
import ItemSelectionModal from "./requests/ItemSelectionModal";
import SelectedItemsList from "./requests/SelectedItemsList";
import ConfirmationDialog from "./requests/ConfirmationDialog";
import RequestForm from "./requests/RequestForm";
import { RequestFormData, TempItem } from "./requests/types";

const NewRequest = () => {
  const { clients, units, budgets, items: availableItems, itemGroups, createRequest } = useData();
  const { user } = useAuth();
  const navigate = useNavigate();
  const { toast } = useToast();

  // Form state
  const [formData, setFormData] = useState<RequestFormData>({
    client: null,
    unit: null,
    budget: null,
    type: "Compra direta",
    justification: "",
    priority: "Moderado",
    items: [],
  });

  // UI state
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [confirmationId, setConfirmationId] = useState<string | null>(null);
  const [isItemModalOpen, setIsItemModalOpen] = useState(false);

  useEffect(() => {
    if (showConfirmation && confirmationId) {
      const timer = setTimeout(() => {
        handleCloseConfirmation(false);
      }, 5000);

      return () => clearTimeout(timer);
    }
  }, [showConfirmation, confirmationId]);

  // Form handlers
  const handleClientChange = (client: Client | null) => {
    setFormData((prev) => ({ 
      ...prev, 
      client, 
      unit: null, 
      budget: null 
    }));
  };

  const handleUnitChange = (unit: Unit | null) => {
    setFormData((prev) => ({ ...prev, unit }));
  };

  const handleBudgetChange = (budget: Budget | null) => {
    setFormData((prev) => ({ ...prev, budget }));
  };

  const handleTypeChange = (type: RequestType) => {
    setFormData((prev) => ({ ...prev, type }));
  };

  const handleJustificationChange = (justification: string) => {
    setFormData((prev) => ({ ...prev, justification }));
  };

  const handlePriorityChange = (priority: Priority) => {
    setFormData((prev) => ({ ...prev, priority }));
  };

  const handleRemoveItem = (index: number) => {
    const newItems = [...formData.items];
    newItems.splice(index, 1);
    setFormData((prev) => ({ ...prev, items: newItems }));
  };

  const handleConfirmItems = (items: TempItem[]) => {
    setFormData((prev) => ({ ...prev, items }));
    setIsItemModalOpen(false);
  };

  // For the request, we need to keep only id, quantity and itemId
  const mapItemsForRequest = (items: TempItem[]) => {
    return items.map((item) => ({
      id: "", // Will be generated by the database
      itemId: item.id,
      quantity: item.quantity,
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      if (!formData.client || !formData.unit || !formData.budget || !user?.id) {
        toast({
          title: "Erro",
          description: "Preencha todos os campos obrigatórios.",
          variant: "destructive",
        });
        return;
      }

      if (!formData.justification.trim()) {
        toast({
          title: "Erro",
          description: "A justificativa é obrigatória.",
          variant: "destructive",
        });
        return;
      }

      if (formData.items.length === 0) {
        toast({
          title: "Erro",
          description: "Adicione pelo menos um item à solicitação.",
          variant: "destructive",
        });
        return;
      }

      const invalidItems = formData.items.filter((item) => item.quantity <= 0);
      if (invalidItems.length > 0) {
        toast({
          title: "Erro",
          description: "Todos os itens devem ter quantidade maior que zero.",
          variant: "destructive",
        });
        return;
      }

      const requestData: Omit<Request, "id" | "createdAt" | "status"> = {
        clientId: formData.client.id,
        unitId: formData.unit.id,
        type: formData.type,
        justification: formData.justification.trim(),
        budgetId: formData.budget.id,
        priority: formData.priority,
        userId: user.id,
        items: mapItemsForRequest(formData.items),
      };

      const requestId = await createRequest(requestData);
      setConfirmationId(requestId);
      setShowConfirmation(true);
    } catch (error) {
      console.error("Error submitting request:", error);
      toast({
        title: "Erro",
        description: "Ocorreu um erro ao enviar a solicitação. Tente novamente.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Function to reset the form
  const resetForm = () => {
    setFormData({
      client: null,
      unit: null,
      budget: null,
      type: "Compra direta",
      justification: "",
      priority: "Moderado",
      items: [],
    });
    setIsSubmitting(false);
    setConfirmationId(null);
  };

  // Handle modal close
  const handleCloseConfirmation = (open: boolean) => {
    setShowConfirmation(open);

    // If the modal was closed and we have a confirmation ID
    if (!open && confirmationId) {
      resetForm();
      navigate("/"); // Redirect to the main route (Dashboard)
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Nova Solicitação</CardTitle>
          <CardDescription>
            Preencha os campos abaixo para criar uma nova solicitação de compra.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <RequestForm 
            formData={formData}
            clients={clients}
            units={units}
            budgets={budgets}
            onClientChange={handleClientChange}
            onUnitChange={handleUnitChange}
            onBudgetChange={handleBudgetChange}
            onTypeChange={handleTypeChange}
            onJustificationChange={handleJustificationChange}
            onPriorityChange={handlePriorityChange}
          />

          {/* Selected Items List */}
          <SelectedItemsList 
            items={formData.items} 
            onRemoveItem={handleRemoveItem} 
          />

          {/* Add Items Button */}
          <div className="pt-2">
            <Button
              type="button"
              variant={formData.items.length > 0 ? "outline" : "default"}
              className={`w-full ${
                formData.items.length === 0
                  ? "bg-teal hover:bg-teal/90"
                  : "border-teal text-teal hover:bg-teal/10"
              }`}
              onClick={() => setIsItemModalOpen(true)}
            >
              <ShoppingCart className="mr-2 h-4 w-4" />
              {formData.items.length > 0 ? "Gerenciar Itens" : "Adicionar Itens"}
            </Button>
          </div>
        </CardContent>
      </Card>

      <Button type="submit" className="w-full" disabled={isSubmitting || formData.items.length === 0}>
        {isSubmitting ? "Enviando..." : "Enviar Solicitação"}
      </Button>

      {/* Confirmation Dialog */}
      <ConfirmationDialog
        open={showConfirmation}
        onOpenChange={handleCloseConfirmation}
      />

      {/* Item Selection Modal */}
      <ItemSelectionModal
        open={isItemModalOpen}
        onOpenChange={setIsItemModalOpen}
        items={formData.items}
        onConfirm={handleConfirmItems}
        availableItems={availableItems}
        itemGroups={itemGroups}
      />
    </form>
  );
};

export default NewRequest;
